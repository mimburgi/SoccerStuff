# source('FBref-scraper.R')
#
#
# #df with page names and matching table names
# leaguevals<-data.frame(leaguename=c('Bundesliga', 'Premier-League','Serie-A', 'La-Liga', 'Ligue-1'),
#                        leaguenumber=c('20', '9', '11', '12', '13')
# )
#
# ################
# ### do work ####
# ################
#
# ## initial scraping ####
#
#
# #currently missing playing time, will need to remove players with zero mins if we want to add that in
# pagenames<-c('standard', 'shooting',
#               'passing', 'passing_types', 'gca', 'defense',
#               'possession', 'misc')
#
#
# for (league in 1:nrow(leaguevals)){#league is the row index number within the leaguevals df
#
#   leaguename<-leaguevals$leaguename[league]
#   leaguenumber<-leaguevals$leaguenumber[league]
#
#   for (page in pagenames){
#     if(page=='standard'){
#       leagueurl<-paste0("https://fbref.com/en/comps/", leaguenumber, "/stats/", leaguename, "-Stats")
#     # }else if(page=='playing_time'){
#     #   leagueurl<-paste0("https://fbref.com/en/comps/", leaguenumber, "/playingtime/", leaguename, "-Stats")
#     }else{
#       leagueurl<-paste0("https://fbref.com/en/comps/", leaguenumber, "/", page, '/', leaguename, "-Stats")
#     }
#
#
#     #get the table from this page, stored in df called thisLeague
#     if (page==pagenames[1]){#initialize df if its the first table for the league
#         thisLeague<-getFBrefStats(leagueurl, paste0('#stats_',page))
#     }
#     else{#after that add to the df
#       tmp = getFBrefStats(leagueurl, paste0('#stats_',page))
#       thisLeague<- cbind(thisLeague, tmp)
#     }
#
#   }#end for page loop
#
#   #add league name to df
#   thisLeague$League<-c("League", rep(leaguename, nrow(thisLeague)-1))
#
#   if (league==1){ #for the first league, initialize players
#     players<-thisLeague
#   }
#   else{ #after that add to players
#     players<-rbind(players, thisLeague[-1,]) #first row is variable names
#   }
#
# }#end league loop
#
#
#
# write.csv(players, 'top5playersraw.csv')
## reformat to make the table easier to use ####
formatted<-players[-1,]
colnames(formatted)<-players[1,]
library(tidyverse)
#rename a bunch of columns
#df containing string for marker in top column of players colnames and addon for those columns
replacevals<-data.frame(tag=c('Per 90 Minutes',
'Total', 'Short', 'Medium', 'Long',
'Pass Types','Corner Kicks', 'Height', 'Body Parts', 'Outcomes',
'SCA Types', 'GCA Types', 'Tackles', 'Vs Dribbles',
'Pressures', 'Blocks', 'Touches', 'Dribbles', 'Carries', 'Aerial Duels'),
prefix=c('per90',
'Pass', 'SPass', 'MPass', 'LPass',
'Pass','CK', 'Pass', 'Pass', 'Pass',
'SCA', 'GCA', 'Tkl', 'vDrib',
'Press','Block', 'Touches','Drib', 'Carry', 'Aer'))
#loop through the df and add prefixes to variables in formatted
for (i in 1:nrow(replacevals)){
names(formatted)[names(players)==replacevals$tag[i]]<-
paste0(
replacevals$prefix[i],
names(formatted)[names(players)==replacevals$tag[i]]
)
}
#remove duplicate columns
formatted<-formatted[,which(!duplicated(names(formatted)))] #original scraped data with weird first row
#change some now redundant names
formatted<-formatted %>%
rename(Press=PressPress, Blocks=BlockBlocks, Touches=TouchesTouches, Carries=CarryCarries)
#remove spaces in column names beacuse I don't like that
colnames(formatted)<-str_replace(colnames(formatted), " ", "")
#remove per 90s (we want to convert everything to per 90)
formatted<-subset(formatted, select=which(!grepl( "90" , names(formatted))))
#remove comma in Min column so we can convert it to a number
formatted$Min<-str_replace(formatted$Min, ",", "")
#convert everything to numeric (other than actual character columns)
numbers<-formatted %>% mutate_all(as.numeric) %>% select_if(~ any(!is.na(.))) #numbers
chars<-formatted %>% select(!any_of(names(numbers))) #chars
formatted<-cbind(chars, numbers) #merge them back
#remove per 90 columns (we'll convert everything to per 90)
formatted<-subset(formatted, select=which(!grepl( "90" , names(formatted))))
#convert everything in formatted to per 90s
dontconvert<-which(grepl(pattern = 'Squad|League|/Sh|/SoT|%|MP|Min|Starts|Poss', names(formatted)))
for (row in 1:nrow(formatted)){
formatted[row,-dontconvert]<-formatted[row,-dontconvert]/formatted$MP[row]
}
#rename some stray columns
colnames(formatted)[colnames(formatted)=="1/3"]<-'PassF3'
colnames(formatted)[colnames(formatted)=="Prog"]<-'ProgPasses'
## save out ####
write.csv(formatted,'top5players.csv')
head(formatted)
warnings()
summary(formatted)
View(formatted)
test<-read.csv('top5playersraw.csv')
tail(test)
#remember to open the docker first!!!
source('FBref-scraper.R')
#df with page names and matching table names
leaguevals<-data.frame(leaguename=c('Bundesliga', 'Premier-League','Serie-A', 'La-Liga', 'Ligue-1'),
leaguenumber=c('20', '9', '11', '12', '13')
)
################
### do work ####
################
## initial scraping ####
#currently missing playing time, will need to remove players with zero mins if we want to add that in
pagenames<-c('standard', 'shooting',
'passing', 'passing_types', 'gca', 'defense',
'possession', 'misc')
for (league in 1:nrow(leaguevals)){#league is the row index number within the leaguevals df
leaguename<-leaguevals$leaguename[league]
leaguenumber<-leaguevals$leaguenumber[league]
for (page in pagenames){
if(page=='standard'){
leagueurl<-paste0("https://fbref.com/en/comps/", leaguenumber, "/stats/", leaguename, "-Stats")
# }else if(page=='playing_time'){
#   leagueurl<-paste0("https://fbref.com/en/comps/", leaguenumber, "/playingtime/", leaguename, "-Stats")
}else{
leagueurl<-paste0("https://fbref.com/en/comps/", leaguenumber, "/", page, '/', leaguename, "-Stats")
}
#get the table from this page, stored in df called thisLeague
if (page==pagenames[1]){#initialize df if its the first table for the league
thisLeague<-getFBrefStats(leagueurl, paste0('#stats_',page))
}
else{#after that add to the df
tmp = getFBrefStats(leagueurl, paste0('#stats_',page))
thisLeague<- cbind(thisLeague, tmp)
}
}#end for page loop
#add league name to df
thisLeague$League<-c("League", rep(leaguename, nrow(thisLeague)-1))
if (league==1){ #for the first league, initialize players
players<-thisLeague
}
else{ #after that add to players
players<-rbind(players, thisLeague[-1,]) #first row is variable names
}
}#end league loop
write.csv(players, 'top5playersraw.csv')
## reformat to make the table easier to use ####
formatted<-players[-1,]
colnames(formatted)<-players[1,]
library(tidyverse)
#rename a bunch of columns
#df containing string for marker in top column of players colnames and addon for those columns
replacevals<-data.frame(tag=c('Per 90 Minutes',
'Total', 'Short', 'Medium', 'Long',
'Pass Types','Corner Kicks', 'Height', 'Body Parts', 'Outcomes',
'SCA Types', 'GCA Types', 'Tackles', 'Vs Dribbles',
'Pressures', 'Blocks', 'Touches', 'Dribbles', 'Carries', 'Aerial Duels'),
prefix=c('per90',
'Pass', 'SPass', 'MPass', 'LPass',
'Pass','CK', 'Pass', 'Pass', 'Pass',
'SCA', 'GCA', 'Tkl', 'vDrib',
'Press','Block', 'Touches','Drib', 'Carry', 'Aer'))
#loop through the df and add prefixes to variables in formatted
for (i in 1:nrow(replacevals)){
names(formatted)[names(players)==replacevals$tag[i]]<-
paste0(
replacevals$prefix[i],
names(formatted)[names(players)==replacevals$tag[i]]
)
}
#remove duplicate columns
formatted<-formatted[,which(!duplicated(names(formatted)))] #original scraped data with weird first row
#change some now redundant names
formatted<-formatted %>%
rename(Press=PressPress, Blocks=BlockBlocks, Touches=TouchesTouches, Carries=CarryCarries)
#remove spaces in column names beacuse I don't like that
colnames(formatted)<-str_replace(colnames(formatted), " ", "")
#remove per 90s (we want to convert everything to per 90)
formatted<-subset(formatted, select=which(!grepl( "90" , names(formatted))))
#remove comma in Min column so we can convert it to a number
formatted$Min<-str_replace(formatted$Min, ",", "")
#remove rows that are just variable names
formatted<-subset(formatted, Player!='Player')
#convert everything to numeric (other than actual character columns)
numbers<-formatted %>% mutate_all(as.numeric) %>% select_if(~ any(!is.na(.))) #numbers
chars<-formatted %>% select(!any_of(names(numbers))) #chars
formatted<-cbind(chars, numbers) #merge them back
#remove per 90 columns (we'll convert everything to per 90)
formatted<-subset(formatted, select=which(!grepl( "90" , names(formatted))))
#remove problem players with very few Min played
formatted<-subset(formatted, Min >= 500)
#convert everything in formatted to per 90s
dontconvert<-which(grepl(pattern = 'Player|Pos|Matches|Squad|League|/Sh|/SoT|%|MP|Min|Starts|Poss|Age|Born|Nation', names(formatted)))
for (row in 1:nrow(formatted)){
formatted[row,-dontconvert]<-formatted[row,-dontconvert]/(formatted$Min[row]/90)
}
#rename some stray columns
colnames(formatted)[colnames(formatted)=="1/3"]<-'PassF3'
colnames(formatted)[colnames(formatted)=="Prog"]<-'ProgPasses'
## save out ####
write.csv(formatted,'top5players.csv')
tail(formatted)
source('../MLSplayers-dirty/soccer_util_fxns.R')
library(tidyverse)
library(ggplot2)
library(psych)
library(GPArotation)
library(FactoMineR)
players<-read.csv('../top5players.csv')
teams<-read.csv('../top5teams.csv')
## team adjustments ####
players$TotalProg<-players$PassPrgDist + players$CarryPrgDist
teams$TotalProg<-teams$PassPrgDist + teams$CarryPrgDist
players$nsSCA<-players$SCADrib+players$SCAPassLive+players$SCAFld
teams$nsSCA<-teams$SCADrib+teams$SCAPassLive+teams$SCAFld
players<-filter(players, Min > 1000)%>%filter(Pos !='GK')
players$Crs<-players$Crs-players$PassCK
teams$Crs<-teams$Crs-teams$PassCK
players$BallsWon<-players$Int+players$TklW+players$PressSucc
teams$BallsWon<-teams$Int+teams$TklW+teams$PressSucc
players$CrsPAperc<-players$CrsPA/players$Crs
teams$CrsPAperc<-teams$CrsPA/teams$Crs
usedvars<-c(
'PressSucc', 'Press',
'Sh',
'nsSCA',
'Crs',
'TotalProg',
'BallsWon')
for (player in 1:nrow(df)){
for (var in usedvars){
playerteam<-df$Squad[player]
teamvar<-teams[[var]][teams$Squad==playerteam]
df[[paste0('team', var)]][player]<-teamvar
df[[paste0('tAdj', var)]][player]<-
df[[var]][player]/df[[paste0('team', var)]]
}
}
topprogs<-c()
for (team in teams$Squad){
teamplayers<-subset(players, Squad==team) %>% arrange(TotalProg)
topteamprogs<-teamplayers$Player[1:4]
topprogs<-c(topprogs, topteamprogs)
}
topprogs
setwd("./Euroteams-dirty")
source('../MLSplayers-dirty/soccer_util_fxns.R')
library(tidyverse)
library(ggplot2)
library(psych)
library(GPArotation)
library(FactoMineR)
players<-read.csv('../top5players.csv')
teams<-read.csv('../top5teams.csv')
## team adjustments ####
players$TotalProg<-players$PassPrgDist + players$CarryPrgDist
teams$TotalProg<-teams$PassPrgDist + teams$CarryPrgDist
players$nsSCA<-players$SCADrib+players$SCAPassLive+players$SCAFld
teams$nsSCA<-teams$SCADrib+teams$SCAPassLive+teams$SCAFld
players<-filter(players, Min > 1000)%>%filter(Pos !='GK')
players$Crs<-players$Crs-players$PassCK
teams$Crs<-teams$Crs-teams$PassCK
players$BallsWon<-players$Int+players$TklW+players$PressSucc
teams$BallsWon<-teams$Int+teams$TklW+teams$PressSucc
players$CrsPAperc<-players$CrsPA/players$Crs
teams$CrsPAperc<-teams$CrsPA/teams$Crs
usedvars<-c(
'PressSucc', 'Press',
'Sh',
'nsSCA',
'Crs',
'TotalProg',
'BallsWon')
for (player in 1:nrow(df)){
for (var in usedvars){
playerteam<-df$Squad[player]
teamvar<-teams[[var]][teams$Squad==playerteam]
df[[paste0('team', var)]][player]<-teamvar
df[[paste0('tAdj', var)]][player]<-
df[[var]][player]/df[[paste0('team', var)]]
}
}
topprogs<-c()
for (team in teams$Squad){
teamplayers<-subset(players, Squad==team) %>% arrange(TotalProg)
topteamprogs<-teamplayers$Player[1:4]
topprogs<-c(topprogs, topteamprogs)
}
topprogs
usedvars<-c(
'PressSucc', 'Press',
'Sh',
'nsSCA',
'Crs',
'PassPrgDist',
'TotalProg',
'BallsWon')
for (player in 1:nrow(df)){
for (var in usedvars){
playerteam<-df$Squad[player]
teamvar<-teams[[var]][teams$Squad==playerteam]
df[[paste0('team', var)]][player]<-teamvar
df[[paste0('tAdj', var)]][player]<-
df[[var]][player]/df[[paste0('team', var)]]
}
}
for (player in 1:nrow(df)){
for (var in usedvars){
playerteam<-df$Squad[player]
teamvar<-teams[[var]][teams$Squad==playerteam]
df[[paste0('team', var)]][player]<-teamvar
df[[paste0('tAdj', var)]][player]<-
df[[var]][player]/df[[paste0('team', var)]]
}
}
source('../MLSplayers-dirty/soccer_util_fxns.R')
library(tidyverse)
library(ggplot2)
library(psych)
library(GPArotation)
library(FactoMineR)
players<-read.csv('../top5players.csv')
teams<-read.csv('../top5teams.csv')
## team adjustments ####
players$TotalProg<-players$PassPrgDist + players$CarryPrgDist
teams$TotalProg<-teams$PassPrgDist + teams$CarryPrgDist
players$nsSCA<-players$SCADrib+players$SCAPassLive+players$SCAFld
teams$nsSCA<-teams$SCADrib+teams$SCAPassLive+teams$SCAFld
players<-filter(players, Min > 1000)%>%filter(Pos !='GK')
players$Crs<-players$Crs-players$PassCK
teams$Crs<-teams$Crs-teams$PassCK
players$BallsWon<-players$Int+players$TklW+players$PressSucc
teams$BallsWon<-teams$Int+teams$TklW+teams$PressSucc
players$CrsPAperc<-players$CrsPA/players$Crs
teams$CrsPAperc<-teams$CrsPA/teams$Crs
usedvars<-c(
'PressSucc', 'Press',
'Sh',
'nsSCA',
'Crs',
'PassPrgDist',
'TotalProg',
'BallsWon')
for (player in 1:nrow(df)){
for (var in usedvars){
playerteam<-df$Squad[player]
teamvar<-teams[[var]][teams$Squad==playerteam]
df[[paste0('team', var)]][player]<-teamvar
df[[paste0('tAdj', var)]][player]<-
df[[var]][player]/df[[paste0('team', var)]]
}
}
head(df)
topprogs<-c()
for (team in teams$Squad){
teamplayers<-subset(players, Squad==team) %>% arrange(TotalProg)
topteamprogs<-teamplayers$Player[1:4]
topprogs<-c(topprogs, topteamprogs)
}
topprogs
for (team in teams$Squad){
teamplayers<-subset(players, Squad==team) %>% arrange(PassPrgDist)
topteamprogs<-teamplayers$Player[1:4]
topprogs<-c(topprogs, topteamprogs)
}
topprogs
players$PrgDistperTouch<-players$TotalProg/players$Touches
topprogs<-c()
for (team in teams$Squad){
teamplayers<-subset(players, Squad==team) %>% arrange(PassPrgDist)
topteamprogs<-teamplayers$Player[1:4]
topprogs<-c(topprogs, topteamprogs)
}
topprogs
players$PrgDistperTouch<-players$PassPrgDist/players$Touches
View(players %>% arrange(PrgDistperTouch))
players$PrgDistperTouch<-players$ProgPasses/players$Touches
players$PrgPassperTouch<-players$ProgPasses/players$Touches
topprogs<-c()
for (team in teams$Squad){
teamplayers<-subset(players, Squad==team) %>% arrange(PassPrgDist)
topteamprogs<-teamplayers$Player[1:4]
topprogs<-c(topprogs, topteamprogs)
}
topprogs
View(players %>% arrange(PrgPassperTouch))
players$PrgPassperTouch<-players$ProgPasses
View(players %>% arrange(PrgPasses))
View(players %>% arrange(ProgPasses))
View(players %>% arrange(CarryPrgDist))
View(players %>% arrange(Carries)
)
View(players %>% arrange(CarryTotalDist)
)
?arrange
for (team in teams$Squad){
teamplayers<-subset(players, Squad==team) %>% arrange(TotalProg, desc)
topteamprogs<-teamplayers$Player[1:4]
topprogs<-c(topprogs, topteamprogs)
}
for (team in teams$Squad){
}
topprogs<-c()
for (team in teams$Squad){
teamplayers<-subset(players, Squad==team) %>% arrange(desc(TotalProg))
topteamprogs<-teamplayers$Player[1:4]
topprogs<-c(topprogs, topteamprogs)
}
topprogs
players$PrgperTouch<-players$TotalProg/players$Touches
View(players %>% arrange(desc(PrgperTouch)))
View(players %>% arrange(desc(ProgPasses)))
View(players %>% arrange(desc(ProgPasses)) %>% subset(Squad=='Liverpool'))
View(players %>% arrange(desc(ProgPasses)) %>% subset(Squad=='Manchester United'))
teams$Squad
View(players %>% arrange(desc(ProgPasses)) %>% subset(Squad=='Manchester Utd'))
View(players %>% arrange(desc(ProgPasses)) %>% subset(Squad=='Manchester City'))
View(players %>% arrange(desc(ProgPasses)) %>% subset(Squad=='Chelsea'))
View(players %>% arrange(desc(PassPrgDist)) %>% subset(Squad=='Liverpool'))
View(players %>% arrange(desc(Carries)) %>% subset(Squad=='Liverpool'))
View(players %>% arrange(desc(CarryPrgDist)) %>% subset(Squad=='Liverpool'))
View(players %>% arrange(desc(CarryPrgDist/Carries)) %>% subset(Squad=='Liverpool'))
View(players %>% arrange(desc(PassPrgDist/PassLive)) %>% subset(Squad=='Liverpool'))
View(players %>% arrange(desc(CarryPrgDist/Carries)) %>% subset(Squad=='Chelsea'))
View(players %>% arrange(desc(CarryPrgDist/Carries)) %>% subset(Squad=='Leicester City'))
View(players %>% arrange(desc(PassPrgDist/PassLive)) %>% subset(Squad=='Leicester City'))
View(players %>% arrange(desc(PassPrgDist)) %>% subset(Squad=='Leicester City'))
View(players %>% arrange(desc(ProgPasses)) %>% subset(Squad=='Leicester City'))
View(players %>% arrange(desc(ProgPasses/PressPass)) %>% subset(Squad=='Leicester City'))
View(players %>% arrange(desc(ProgPasses/PassPress)) %>% subset(Squad=='Leicester City'))
View(players %>% arrange(desc(PassPrgDist/PassPress)) %>% subset(Squad=='Leicester City'))
View(players %>% arrange(desc(ProgPasses/PassPress)) %>% subset(Squad=='Liverpool'))
teams$PrgperTouch<-teams$TotalProg/teams$Touches
View(teams %>% arrange(PrgperTouch))
View(teams %>% arrange(PrgperTouch) %>% select(Squad, PrgperTouch))
View(teams %>% arrange(ProgPasses/PassLive))
View(teams %>% arrange(desc(ProgPasses/PassLive)))
View(teams %>% arrange(desc(PassPrgDist/PassLive)))
View(teams %>% arrange(PassPrgDist/PassLive))
View(teams %>% arrange(CarryPrgDist/Carries))
View(teams %>% arrange(CarryPrgDist+PassPrgDist/Carries+PassLive))
View(teams %>% arrange(CarryPrgDist+PassPrgDist/CarryTotDist+PassTotDist))
View(teams %>% arrange((PressAtt3rd+PressMid3rd)/Press))
View(teams %>% arrange(desc(PressAtt3rd+PressMid3rd)/Press)))
View(teams %>% arrange(desc(PressAtt3rd+PressMid3rd)/Press))
getWhoScoredStats = function(url,id){
require(RSelenium)
require(dplyr)
# For some unspecified reason we are starting and stopping the docker container initailly.
# Similar to heating the bike's engine before shifting the gears.
system("docker run -d -p 4445:4444 selenium/standalone-chrome")
t = system("docker ps",intern=TRUE)
if(is.na(as.character(strsplit(t[2],split = " ")[[1]][1]))==FALSE)
{
system(paste("docker stop ",as.character(strsplit(t[2],split = " ")[[1]][1]),sep=""))
}
# To avoid starting docker in Terminal
system("docker run -d -p 4445:4444 selenium/standalone-chrome")
Sys.sleep(3)
remDr <- RSelenium::remoteDriver(remoteServerAddr = "192.168.99.100",port = 4445L,browserName = "chrome")
# Automating the scraping initiation considering that Page navigation might crash sometimes in
# R Selenuium and we have to start the process again. Good to see that this while() logic
# works perfectly
while (TRUE) {
tryCatch({
#Entering our URL gets the browser to navigate to the page
remDr$open()
remDr$navigate(as.character(url))
}, error = function(e) {
remDr$close()
Sys.sleep(2)
print("slept 2 seconds")
next
}, finally = {
#remDr$screenshot(display = TRUE) #This will take a screenshot and display it in the RStudio viewer
break
})
}
# Scraping required stats
data <- xml2::read_html(remDr$getPageSource()[[1]]) %>%
rvest::html_nodes(id) %>%
rvest::html_table()
data = data[[1]]
remDr$close()
remove(remDr)
# Automating the following steps:
# 1. run "docker ps" in Terminal and get the container ID from the output
# 2. now run "docker stop container_id" e.g. docker stop f59930f56e38
t = system("docker ps",intern=TRUE)
system(paste("docker stop ",as.character(strsplit(t[2],split = " ")[[1]][1]),sep=""))
return(data)
}
getWhoScoredStats("https://www.whoscored.com/Regions/252/Tournaments/2/Seasons/7811/Stages/17590/TeamStatistics/England-Premier-League-2019-2020", "statistics-team-table-summary")
getWhoScoredStats("https://www.whoscored.com/Regions/252/Tournaments/2/Seasons/7811/Stages/17590/TeamStatistics/England-Premier-League-2019-2020", "#statistics-team-table-summary")
getWhoScoredStats("https://www.whoscored.com/Regions/252/Tournaments/2/Seasons/7811/Stages/17590/TeamStatistics/England-Premier-League-2019-2020", "#stage-passes-grid")
