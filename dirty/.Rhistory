))
#trim<-subset(trim, League=="MLS")
###look for most variability across candidate features ####
relsds<-trim %>% select_if(is.numeric) %>% apply(2, rsd) %>%
as.data.frame() %>% rownames_to_column() %>% arrange(desc(.))
#take top 10 including xGdiffper which is negative but huge
top10<-relsds$rowname[c(1:10)]
trim2<-select(trim, one_of(top10))
trim2$Team<-trim$Team
transformed<-select_if(trim2, is.numeric)%>%
preProcess(method=c("scale", "center", "YeoJohnson", "corr"), cutoff=.7) %>%
predict(trim2)
## try regular knn ####
mlsteams<-which(trim$League=="MLS")
euroteams<-which(trim$League!="MLS")
fit<-kknn::kknn(Team ~ ., transformed[euroteams,], transformed[mlsteams,],
k = 3, scale = F)
mlscomp<-subset(trim, League=='MLS') %>%
mutate(eurocomp=as.character(fit$fitted.values)) %>%
mutate(team=subset(trim, League=='MLS')[['Team']])
length(unique(mlscomp$eurocomp))
colnames(transformed)
library(tidyr)
source('soccer_util_fxns.R')
##initial feature trimming, keep only what might be valuable ####
raw<-read.table('rawdata_full.txt', header = T)
trim<-select(raw, c(Team, League,
#percTBKP,
attackMiddle,
percOppThird,
ThroughballKP,
CrossKP,
CounterShots,
#FastSF,
#percLongKeyPasses,
LongKeyPasses,
ShortKeyPasses,
percLongKP,
#OtherKP,
TotalKeyPasses,
#percOutofBoxShots,
OutOfBoxShots,
SixYardBoxShots,
#PenaltyAreaShots,
TotalShots,
xGper,
xGshot,
#xGdiffper,
xGAper,
#xGAdiffper,
SetPieceShots,
#percSetPieceShots,
TotalPasses,
percLB,
OpenPlayShots,
TotalDribbles,
pAdjTackles,
pAdjInts,
pAdjClearances,
TotalAerial
))
#trim<-subset(trim, League=="MLS")
###look for most variability across candidate features ####
relsds<-trim %>% select_if(is.numeric) %>% apply(2, rsd) %>%
as.data.frame() %>% rownames_to_column() %>% arrange(desc(.))
#take top 10 including xGdiffper which is negative but huge
top10<-relsds$rowname[c(1:10)]
trim2<-select(trim, one_of(top10))
trim2$Team<-trim$Team
transformed<-select_if(trim2, is.numeric)%>%
preProcess(method=c("scale", "center", "YeoJohnson", "corr"), cutoff=.5) %>%
predict(trim2)
## try regular knn ####
mlsteams<-which(trim$League=="MLS")
euroteams<-which(trim$League!="MLS")
fit<-kknn::kknn(Team ~ ., transformed[euroteams,], transformed[mlsteams,],
k = 3, scale = F)
mlscomp<-subset(trim, League=='MLS') %>%
mutate(eurocomp=as.character(fit$fitted.values)) %>%
mutate(team=subset(trim, League=='MLS')[['Team']])
length(unique(mlscomp$eurocomp))
colnames(transformed)
transformed
install.packages(c("ggiraphExtra", "Rmisc"))
install.packages("kknn")
library(tidyr)
source('soccer_util_fxns.R')
##initial feature trimming, keep only what might be valuable ####
raw<-read.table('rawdata_full.txt', header = T)
trim<-select(raw, c(Team, League,
percTBKP,
attackMiddle,
percOppThird,
ThroughballKP,
CrossKP,
CounterShots,
FastSF,
percLongKeyPasses,
LongKeyPasses,
ShortKeyPasses,
percLongKP,
OtherKP,
TotalKeyPasses,
percOutofBoxShots,
OutOfBoxShots,
SixYardBoxShots,
PenaltyAreaShots,
TotalShots,
xGper,
xGshot,
xGdiffper,
xGAper,
xGAdiffper,
SetPieceShots,
percSetPieceShots,
TotalPasses,
percLB,
OpenPlayShots,
TotalDribbles,
pAdjTackles,
pAdjInts,
pAdjClearances,
TotalAerial
))
library(dplyr)
trim<-select(raw, c(Team, League,
percTBKP,
attackMiddle,
percOppThird,
ThroughballKP,
CrossKP,
CounterShots,
FastSF,
percLongKeyPasses,
LongKeyPasses,
ShortKeyPasses,
percLongKP,
OtherKP,
TotalKeyPasses,
percOutofBoxShots,
OutOfBoxShots,
SixYardBoxShots,
PenaltyAreaShots,
TotalShots,
xGper,
xGshot,
xGdiffper,
xGAper,
xGAdiffper,
SetPieceShots,
percSetPieceShots,
TotalPasses,
percLB,
OpenPlayShots,
TotalDribbles,
pAdjTackles,
pAdjInts,
pAdjClearances,
TotalAerial
))
##reduce dimensionality ####
library(psych) #for principal
library(GPArotation) #for rotation within principal
fit <- principal(bothscaled, nfactors=7, rotate="promax")
fit <- principal(trim, nfactors=7, rotate="promax")
## scale data by league ####
grouped<-trim %>% group_by(League)
scaled<-grouped %>% scale()
## scale data by league ####
grouped<-trim %>% mutate(LeagueNum=as.numeric(League))
head(grouped)
## scale data by league ####
grouped<-trim %>% mutate(LeagueNum=as.numeric(as.factor(League))
)
head(grouped)
## scale data by league ####
teams<-trim$Team
grouped<-trim %>% mutate(LeagueNum=as.numeric(as.factor(League))) %>%
select_if(is.numeric) %>% group_by(LeagueNum)
scaled<-grouped %>% scale()
fit <- principal(scaled, nfactors=7, rotate="promax")
fit <- principal(scaled, nfactors=2, rotate="promax")
fit <- principal(scaled, nfactors=2)
head(scaled)
scaled<-grouped %>% scale() %>% as.data.frame()
fit <- principal(scaled, nfactors=2)
scaled<-grouped %>% scale() %>% as.data.frame() %>% select(-LeagueNum)
##reduce dimensionality ####
library(psych) #for principal
library(GPArotation) #for rotation within principal
fit <- principal(scaled, nfactors=2)
fit <- principal(cor(scaled), nfactors=2)
scaledcomplete<-> scaled[complete.cases(scaled), ]
scaledcomplete<- scaled[complete.cases(scaled), ]
fit <- principal(scaledcomplete, nfactors=2)
fit <- principal(cor(scaledcomplete), nfactors=2)
sum(is.na(scaledcomplete))
fit <- principal(cor(scaledcomplete), nfactors=7)
fit <- principal(cor(scaledcomplete), nfactors=7, rotation='varimax')
fit <- principal(cor(scaledcomplete), nfactors=7, rotation=varimax)
fit <- principal(cor(scaledcomplete), nfactors=7, rotate="varimax")
print(fit)
fit <- principal(cor(scaledcomplete), nfactors=6, rotate="promax")
print(fit)
colnames(raw)
trim<-select(raw, c(Team, League,
TotalPasses, TotalShots,
Successful, TotalDribbles,
TotalAerial, Dispossessed, UnsuccessfulTouches,
TotalKeyPasses, LongKeyPasses, ShortKeyPasses,
npxG, npxGA, ppda_coef,
oppda_coef, deep, deep_allowed, FastGF, FastSF, FastxG,
FastxGpershot, percOutofBoxShots, percSixYardBoxShots,
percPenaltyAreaShots, percAerial, TotalLB, accLB, percLB,
TotalSP, accSP, percLongKeyPasses, percCrossAss, percCornerAss,
percThroughballAss, percFreekickAss, percSetPieceAss, percDribbles, percSetPieceShots,
percCounterShots, percLongKP, percTBKP, percCrossKP, xGper, xGdiffper, xGAper, xGAdiffper,
SuccessDA, CounterDA, npXGApershot, xGshot, pAdjTackles, pAdjInts, pAdjClearances)
))
trim<-select(raw, c(Team, League,
TotalPasses, TotalShots,
Successful, TotalDribbles,
TotalAerial, Dispossessed, UnsuccessfulTouches,
TotalKeyPasses, LongKeyPasses, ShortKeyPasses,
npxG, npxGA, ppda_coef,
oppda_coef, deep, deep_allowed, FastGF, FastSF, FastxG,
FastxGpershot, percOutofBoxShots, percSixYardBoxShots,
percPenaltyAreaShots, percAerial, TotalLB, accLB, percLB,
TotalSP, accSP, percLongKeyPasses, percCrossAss, percCornerAss,
percThroughballAss, percFreekickAss, percSetPieceAss, percDribbles, percSetPieceShots,
percCounterShots, percLongKP, percTBKP, percCrossKP, xGper, xGdiffper, xGAper, xGAdiffper,
SuccessDA, CounterDA, npXGApershot, xGshot, pAdjTackles, pAdjInts, pAdjClearances))
trim<-select(raw, c(Team, League,
TotalPasses, TotalShots,
Successful, TotalDribbles,
TotalAerial, Dispossessed, UnsuccessfulTouches,
TotalKeyPasses, LongKeyPasses, ShortKeyPasses,
npxG, npxGA, ppda_coef,
oppda_coef, deep, deep_allowed, FastGF, FastSF, FastxG,
FastxGperShot, percOutofBoxShots, percSixYardBoxShots,
percPenaltyAreaShots, percAerial, TotalLB, accLB, percLB,
TotalSP, accSP, percLongKeyPasses, percCrossAss, percCornerAss,
percThroughballAss, percFreekickAss, percSetPieceAss, percDribbles, percSetPieceShots,
percCounterShots, percLongKP, percTBKP, percCrossKP, xGper, xGdiffper, xGAper, xGAdiffper,
SuccessDA, CounterDA, npXGApershot, xGshot, pAdjTackles, pAdjInts, pAdjClearances))
trim<-select(raw, c(Team, League,
TotalPasses, TotalShots,
Successful, TotalDribbles,
TotalAerial, Dispossessed, UnsuccessfulTouches,
TotalKeyPasses, LongKeyPasses, ShortKeyPasses,
npxG, npxGA, ppda_coef,
oppda_coef, deep, deep_allowed, FastGF, FastSF, FastxG,
FastxGperShot, percOutofBoxShots, percSixYardBoxShots,
percPenaltyAreaShots, percAerial, TotalLB, accLB, percLB,
TotalSP, accSP, percLongKeyPasses, percCrossAss, percCornerAss,
percThroughballAss, percFreekickAss, percSetPieceAss, percDribbles, percSetPieceShots,
percCounterShots, percLongKP, percTBKP, percCrossKP, xGper, xGdiffper, xGAper, xGAdiffper,
SuccessDA, CounterDA, npXGAperShot, xGshot, pAdjTackles, pAdjInts, pAdjClearances))
## scale data by league ####
teams<-trim$Team
grouped<-trim %>% mutate(LeagueNum=as.numeric(as.factor(League))) %>%
select_if(is.numeric) %>% group_by(LeagueNum)
scaled<-grouped %>% scale() %>% as.data.frame() %>% select(-LeagueNum)
scaledcomplete<- scaled[complete.cases(scaled), ]
##reduce dimensionality ####
library(psych) #for principal
library(GPArotation) #for rotation within principal
fit <- principal(cor(scaledcomplete), nfactors=6, rotate="promax")
print(fit)
fit <- principal(cor(scaledcomplete), nfactors=6, rotate="varimax")
print(fit)
fit <- principal(cor(scaledcomplete), nfactors=5, rotate="varimax")
print(fit)
res.pca <- PCA(scaledcomplete, graph=FALSE, ncp=7)
library(FactoMineR)
library(factoextra)
res.pca <- PCA(scaledcomplete, graph=FALSE, ncp=7)
fviz_screeplot(res.pca)
res.pca <- PCA(scaledcomplete, graph=FALSE, ncp=6)
fviz_screeplot(res.pca)
res.pca$var$cor %>% # table with factor loadings
varimax # but ask for a varimax rotation to improve interpretability
fviz_pca_var(res.pca, repel = TRUE) # the repel = TRUE argument makes sure the text is displayed nicely on the graph
print(fit)
trim<-select(raw, c(Team, League,
TotalAerial,
ppda_coef,
oppda_coef, deep, deep_allowed, FastxG,
FastxGperShot, percOutofBoxShots, percSixYardBoxShots,
percPenaltyAreaShots, percAerial, TotalLB, accLB, percLB,
TotalSP, accSP, percLongKeyPasses, percDribbles, percSetPieceShots,
percCounterShots, percLongKP, percTBKP, percCrossKP, xGper, xGdiffper, xGAper, xGAdiffper,
SuccessDA, CounterDA, npXGAperShot, xGshot, pAdjTackles, pAdjInts, pAdjClearances))
## scale data by league ####
teams<-trim$Team
grouped<-trim %>% mutate(LeagueNum=as.numeric(as.factor(League))) %>%
select_if(is.numeric) %>% group_by(LeagueNum)
scaled<-grouped %>% scale() %>% as.data.frame() %>% select(-LeagueNum)
scaledcomplete<- scaled[complete.cases(scaled), ]
##reduce dimensionality ####
library(psych) #for principal
library(GPArotation) #for rotation within principal
fit <- principal(cor(scaledcomplete), nfactors=5, rotate="varimax")
print(fit)
simple<-fit$scores %>% as.data.frame()
trim<-select(raw, c(Team, League,
TotalAerial,
ppda_coef,
deep, deep_allowed, FastxG,
percOutofBoxShots, percSixYardBoxShots,
percPenaltyAreaShots, percAerial, accLB, percLB,
accSP, percLongKeyPasses, percDribbles, percSetPieceShots,
percCounterShots, percLongKP, percTBKP, percCrossKP, xGper, xGdiffper, xGAper, xGAdiffper,
SuccessDA, CounterDA, npXGAperShot, xGshot, pAdjTackles, pAdjInts, pAdjClearances))
## scale data by league ####
teams<-trim$Team
grouped<-trim %>% mutate(LeagueNum=as.numeric(as.factor(League))) %>%
select_if(is.numeric) %>% group_by(LeagueNum)
scaled<-grouped %>% scale() %>% as.data.frame() %>% select(-LeagueNum)
scaledcomplete<- scaled[complete.cases(scaled), ]
##reduce dimensionality ####
library(psych) #for principal
library(GPArotation) #for rotation within principal
fit <- principal(cor(scaledcomplete), nfactors=5, rotate="varimax")
print(fit)
fit <- principal(cor(scaledcomplete), nfactors=6, rotate="varimax")
print(fit)
fit <- principal(cor(scaledcomplete), nfactors=6, rotate="promax")
print(fit)
trim<-select(raw, c(Team, League,
TotalAerial,
ppda_coef,
deep, deep_allowed, FastxG,
percOutofBoxShots, percSixYardBoxShots,
percPenaltyAreaShots, percAerial, accLB, percLB,
accSP, percDribbles, percSetPieceShots,
percCounterShots, percLongKP, percTBKP, percCrossKP, xGper, xGdiffper, xGAper, xGAdiffper,
SuccessDA, CounterDA, npXGAperShot, xGshot, pAdjTackles, pAdjInts, pAdjClearances))
## scale data by league ####
teams<-trim$Team
grouped<-trim %>% mutate(LeagueNum=as.numeric(as.factor(League))) %>%
select_if(is.numeric) %>% group_by(LeagueNum)
scaled<-grouped %>% scale() %>% as.data.frame() %>% select(-LeagueNum)
scaledcomplete<- scaled[complete.cases(scaled), ]
fit <- principal(cor(scaledcomplete), nfactors=6, rotate="promax")
print(fit)
simple<-fit$scores %>% as.data.frame()
fit <- principal(cor(scaledcomplete), nfactors=7, rotate="promax")
print(fit)
fit <- principal(cor(scaledcomplete), nfactors=8, rotate="promax")
print(fit)
fit <- principal(cor(scaledcomplete), nfactors=4, rotate="promax")
print(fit)
fit <- principal(cor(scaledcomplete), nfactors=3, rotate="promax")
print(fit)
fit <- principal(cor(scaledcomplete), nfactors=5, rotate="promax")
print(fit)
fit <- principal(cor(scaledcomplete), nfactors=10, rotate="promax")
print(fit)
fit <- principal(cor(scaledcomplete), nfactors=9, rotate="promax")
print(fit)
fit <- principal(cor(scaledcomplete), nfactors=9, rotate="oblimin")
print(fit)
fit <- principal(cor(scaledcomplete), nfactors=6, rotate="oblimin")
print(fit)
fit <- principal(cor(scaledcomplete), nfactors=7, rotate="oblimin")
print(fit)
fit <- principal(cor(scaledcomplete), nfactors=3, rotate="oblimin")
print(fit)
trim<-select(raw, c(Team, League,
TotalAerial, TotalKeyPasses,
ppda_coef,
deep, deep_allowed, FastxG,
percOutofBoxShots, percSixYardBoxShots,
percPenaltyAreaShots, percAerial, accLB, percLB,
accSP, percDribbles, percSetPieceShots,
percCounterShots, percLongKP, percTBKP, percCrossKP, xGper, xGdiffper, xGAper, xGAdiffper,
npXGAperShot, xGshot, pAdjTackles, pAdjInts, pAdjClearances))
## scale data by league ####
teams<-trim$Team
grouped<-trim %>% mutate(LeagueNum=as.numeric(as.factor(League))) %>%
select_if(is.numeric) %>% group_by(LeagueNum)
scaled<-grouped %>% scale() %>% as.data.frame() %>% select(-LeagueNum)
scaledcomplete<- scaled[complete.cases(scaled), ]
##reduce dimensionality ####
library(psych) #for principal
library(GPArotation) #for rotation within principal
fit <- principal(cor(scaledcomplete), nfactors=3, rotate="oblimin")
print(fit)
fit <- principal(cor(scaledcomplete), nfactors=4, rotate="oblimin")
print(fit)
fit <- principal(cor(scaledcomplete), nfactors=5, rotate="oblimin")
print(fit)
fit <- principal(cor(scaledcomplete), nfactors=4, rotate="oblimin")
print(fit)
fit <- principal(cor(scaledcomplete), nfactors=4, rotate="promax")
print(fit)
fit <- principal(cor(scaledcomplete), nfactors=4, rotate="oblimin")
print(fit)
trim<-select(raw, c(Team, League,
TotalKeyPasses,
ppda_coef,
deep, deep_allowed, FastxG,
percOutofBoxShots, percSixYardBoxShots,
percPenaltyAreaShots, accLB, percLB,
accSP, percDribbles, percSetPieceShots,
percCounterShots, percLongKP, percTBKP, percCrossKP,
xGper, xGdiffper, xGAper, xGAdiffper,
xGshot, pAdjTackles, pAdjInts, pAdjClearances))
## scale data by league ####
teams<-trim$Team
grouped<-trim %>% mutate(LeagueNum=as.numeric(as.factor(League))) %>%
select_if(is.numeric) %>% group_by(LeagueNum)
scaled<-grouped %>% scale() %>% as.data.frame() %>% select(-LeagueNum)
scaledcomplete<- scaled[complete.cases(scaled), ]
fit <- principal(cor(scaledcomplete), nfactors=4, rotate="oblimin")
print(fit)
simple<-fit$scores %>% as.data.frame()
install.packages("FNN")
library(kknn)
library(tidyr)
knnset<-select(raw_extra, c(Team, League,
#percTBKP,
#attackMiddle,
#percOppThird,
#ThroughballKP,
#CrossKP,
FastSF,
#percLongKeyPasses,
#LongKeyPasses,
#ShortKeyPasses,
#percLongKP,
#OtherKP,
TotalKeyPasses,
#percOutofBoxShots,
#OutOfBoxShots,
#SixYardBoxShots,
#PenaltyAreaShots,
#TotalShots,
xGper,
#xGshot,
#xGdiffper,
#xGAper,
#xGAdiffper,
SetPieceShots,
#percSetPieceShots,
#TotalPasses,
#percLB,
OpenPlayShots
#TotalDribbles,
#TotalTackles,
#SuccessDA,
#Interceptions,
#Clearances,
#TotalAerial
))
knnsetscaled<-as.data.frame(scale(select_if(knnset, is.numeric)))
mlsteams<-which(knnset$League=="MLS")
euroteams<-which(knnset$League!="MLS")
topeuroteams<-which(raw_extra$League!='MLS' & raw_extra$R < 5)
knnsetscaled$Team<-knnset$Team
rawscaled<-select_if(raw_extra, is.numeric) %>% scale() %>% as.data.frame()
RSDs<-apply(rawscaled[mlsteams,], 2,sd)
library(kknn)
library(dplyr)
library(kknn)
library(tidyr)
library(dplyr)
knnset<-select(raw_extra, c(Team, League,
#percTBKP,
#attackMiddle,
#percOppThird,
#ThroughballKP,
#CrossKP,
FastSF,
#percLongKeyPasses,
#LongKeyPasses,
#ShortKeyPasses,
#percLongKP,
#OtherKP,
TotalKeyPasses,
#percOutofBoxShots,
#OutOfBoxShots,
#SixYardBoxShots,
#PenaltyAreaShots,
#TotalShots,
xGper,
#xGshot,
#xGdiffper,
#xGAper,
#xGAdiffper,
SetPieceShots,
#percSetPieceShots,
#TotalPasses,
#percLB,
OpenPlayShots
#TotalDribbles,
#TotalTackles,
#SuccessDA,
#Interceptions,
#Clearances,
#TotalAerial
))
knnsetscaled<-as.data.frame(scale(select_if(knnset, is.numeric)))
mlsteams<-which(knnset$League=="MLS")
euroteams<-which(knnset$League!="MLS")
topeuroteams<-which(raw_extra$League!='MLS' & raw_extra$R < 5)
knnsetscaled$Team<-knnset$Team
rawscaled<-select_if(raw_extra, is.numeric) %>% scale() %>% as.data.frame()
RSDs<-apply(rawscaled[mlsteams,], 2,sd)
?kknn
?kknn.dist
