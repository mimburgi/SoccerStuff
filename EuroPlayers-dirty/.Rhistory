#'SCADrib',
#'SCAFld',
'SCAPassLive',
#'SCASh',
'tAdjBallsWon',
'tAdjPressMid3rd',
'tAdjPressDef3rd',
'percLongPass',
'percShortPass')
cordisttadj<-tadjscaled %>% select(all_of(initvars)) %>% get_dist(method='spearman')
set.seed(200)
dtsne<-Rtsne::Rtsne(cordisttadj, perplexity=30, is_dist=T)
plot(dtsne$Y)
restsne<-dtsne$Y %>% as.data.frame()
fit <- principal(select(tadjscaled, all_of(initvars)), nfactors=11, rotate="promax")
print(fit)
fit <- principal(select(tadjscaled, all_of(initvars)), nfactors=13, rotate="promax")
print(fit)
respca<-PCA(select(tadjscaled, all_of(initvars)), scale.unit = F, ncp = 13, graph=F)
respca$var$cor %>%
promax
source('../MLSplayers-dirty/soccer_util_fxns.R')
library(tidyverse)
library(ggplot2)
library(psych)
library(GPArotation)
library(FactoMineR)
library(factoextra)
players<-read.csv('../top5players.csv')
teams<-read.csv('../top5teams.csv')
## team adjustments ####
players$TotalProg<-players$PassPrgDist + players$CarryPrgDist
teams$TotalProg<-teams$PassPrgDist + teams$CarryPrgDist
players$nsSCA<-players$SCADrib+players$SCAPassLive+players$SCAFld
teams$nsSCA<-teams$SCADrib+teams$SCAPassLive+teams$SCAFld
players<-filter(players, Min > 1000)%>%filter(Pos !='GK')
players$Crs<-players$Crs-players$PassCK
teams$Crs<-teams$Crs-teams$PassCK
players$BallsWon<-players$Int+players$TklW
teams$BallsWon<-teams$Int+teams$TklW
players$KPperTouch<-players$KP/players$Touches
players$ShperTouch<-players$Sh/players$Touches
players$TouchperAction<-players$TouchesLive/(players$PassLive+players$Sh+players$Dispos + players$Fld)
players$percPassPress<-players$PassPress/players$PassLive
players$percLongPass<-players$LPassAtt/players$PassAtt
players$percShortPass<-players$SPassAtt/players$PassAtt
players$percTB<-players$PassTB/players$PassLive
source('../MLSplayers-dirty/soccer_util_fxns.R')
library(tidyverse)
library(ggplot2)
library(psych)
library(GPArotation)
library(FactoMineR)
library(factoextra)
players<-read.csv('../top5players.csv')
teams<-read.csv('../top5teams.csv')
## team adjustments ####
players$TotalProg<-players$PassPrgDist + players$CarryPrgDist
teams$TotalProg<-teams$PassPrgDist + teams$CarryPrgDist
players$nsSCA<-players$SCADrib+players$SCAPassLive+players$SCAFld
teams$nsSCA<-teams$SCADrib+teams$SCAPassLive+teams$SCAFld
players<-filter(players, Min > 1000)%>%filter(Pos !='GK')
players$Crs<-players$Crs-players$PassCK
teams$Crs<-teams$Crs-teams$PassCK
players$BallsWon<-players$Int+players$TklW
teams$BallsWon<-teams$Int+teams$TklW
players$KPperTouch<-players$KP/players$Touches
players$ShperTouch<-players$Sh/players$Touches
players$TouchperPass<-players$TouchesLive/players$PassLive
players$TouchperAction<-players$TouchesLive/(players$PassLive+players$Sh+players$Dispos + players$Fld)
players$percPassPress<-players$PassPress/players$PassLive
players$percLongPass<-players$LPassAtt/players$PassAtt
players$percShortPass<-players$SPassAtt/players$PassAtt
players$percTB<-players$PassTB/players$PassLive
players$SafeTouch<-players$Touches/players$Dispos
dontadj<-c(
names(players)[which(!(names(players)%in%names(teams)))], #stuff like 'Player' and 'Nation' which is player specific
names(players)[which(grepl(pattern = '\\.', names(players)))], #columns with a period, which is a percentage or xStat-Stat
names(which(sapply(players, is.character))) #any remaining character columns like Squad
)
toadj<-names(players)[!(names(players) %in% dontadj)] #the rest, which will be team adjusted
tadjdf<-players
for (player in 1:nrow(tadjdf)){
for (var in toadj){
playerteam<-tadjdf$Squad[player]
teamvar<-teams[[var]][teams$Squad==playerteam]
tadjdf[[paste0('team', var)]][player]<-teamvar
tadjdf[[paste0('tAdj', var)]][player]<-
tadjdf[[var]][player]/tadjdf[[paste0('team', var)]][player]
}
}
# #remove the team- and original values, rename the tAdj values to original names
# tadjdf<-tadjdf %>%select(which(grepl(pattern = 'Player|Squad|tAdj', names(tadjdf))))
# colnames(tadjdf)<-str_replace(colnames(tadjdf), "tAdj", "")
# # add the unadjusted variables back in
# for (var in dontadj){
#   tadjdf<-tadjdf %>% mutate(!!var:= !!players[[var]])
# }
#remove OG, red cards and ShBlkSav which converted incorrectly because some teams have zero
tadjdf<-tadjdf %>% select(-c(tAdjOG, tAdjCrdR, tAdjBlockShSv))
tadjscaled<-tadjdf %>% select_if(is.numeric) %>% scale() %>% as.data.frame()
scaled<-players %>% select_if(is.numeric) %>% scale %>% as.data.frame()
## initial clustering of major roles ####
initvars<-c(
'Sh', 'npxG',
'ShperTouch',
'KP', 'xA',
'KPperTouch',
'PPA', 'PassF3',
'CrsPA',
'tAdjProgPasses',
'tAdjPassPrgDist',
'TouchperAction',
'tAdjCarryPrgDist',
'DribAtt', 'DribSucc',
'tAdjTouchesAttPen',
'tAdjTouchesAtt3rd',
'tAdjTouchesMid3rd',
'tAdjTouchesDef3rd',
#'tAdjPassLive',
'PassCmp.',
#'SCADrib',
#'SCAFld',
'SCAPassLive',
#'SCASh',
'tAdjBallsWon',
'tAdjPressMid3rd',
'tAdjPressDef3rd',
'percLongPass',
'percShortPass',
'SafeTouch',
'percTB')
cordisttadj<-tadjscaled %>% select(all_of(initvars)) %>% get_dist(method='spearman')
#cordist<-scaled %>% select(all_of(initvars)) %>% get_dist(method='spearman')
set.seed(200)
dtsne<-Rtsne::Rtsne(cordisttadj, perplexity=30, is_dist=T)
plot(dtsne$Y)
restsne<-dtsne$Y %>% as.data.frame()
plot_clust_tendency(4:15, restsne, "tSNE perp 30")
library(ppclust)
resfcm<-fcm(restsne, centers=10, m=2.5)
plot_cluster(restsne, resfcm$cluster)
#plot_radars(resfcm$cluster, select(scaled, all_of(initvars)))
library(FactoMineR)
respca<-PCA(select(tadjscaled, all_of(initvars)), scale.unit = F, ncp = 13, graph=F)
respca$var$cor %>%
promax
library(psych)
library(GPArotation)
fit <- principal(select(tadjscaled, all_of(initvars)), nfactors=13, rotate="promax")
print(fit)
players$RiskyTouch<-players$Dispos/players$TouchesLive
initvars<-c(
'Sh', 'npxG',
'ShperTouch',
'KP', 'xA',
'KPperTouch',
'PPA', 'PassF3',
'CrsPA',
'tAdjProgPasses',
'tAdjPassPrgDist',
'TouchperAction',
'tAdjCarryPrgDist',
'DribAtt', 'DribSucc',
'tAdjTouchesAttPen',
'tAdjTouchesAtt3rd',
'tAdjTouchesMid3rd',
'tAdjTouchesDef3rd',
#'tAdjPassLive',
'PassCmp.',
#'SCADrib',
#'SCAFld',
'SCAPassLive',
#'SCASh',
'tAdjBallsWon',
'tAdjPressMid3rd',
'tAdjPressDef3rd',
'percLongPass',
'percShortPass',
'RiskyTouch',
'percTB')
cordisttadj<-tadjscaled %>% select(all_of(initvars)) %>% get_dist(method='spearman')
source('../MLSplayers-dirty/soccer_util_fxns.R')
library(tidyverse)
library(ggplot2)
library(psych)
library(GPArotation)
library(FactoMineR)
library(factoextra)
players<-read.csv('../top5players.csv')
teams<-read.csv('../top5teams.csv')
## team adjustments ####
players$TotalProg<-players$PassPrgDist + players$CarryPrgDist
teams$TotalProg<-teams$PassPrgDist + teams$CarryPrgDist
players$nsSCA<-players$SCADrib+players$SCAPassLive+players$SCAFld
teams$nsSCA<-teams$SCADrib+teams$SCAPassLive+teams$SCAFld
players<-filter(players, Min > 1000)%>%filter(Pos !='GK')
players$Crs<-players$Crs-players$PassCK
teams$Crs<-teams$Crs-teams$PassCK
players$BallsWon<-players$Int+players$TklW
teams$BallsWon<-teams$Int+teams$TklW
players$KPperTouch<-players$KP/players$Touches
players$ShperTouch<-players$Sh/players$Touches
players$TouchperPass<-players$TouchesLive/players$PassLive
players$TouchperAction<-players$TouchesLive/(players$PassLive+players$Sh+players$Dispos + players$Fld)
players$percPassPress<-players$PassPress/players$PassLive
players$percLongPass<-players$LPassAtt/players$PassAtt
players$percShortPass<-players$SPassAtt/players$PassAtt
players$percTB<-players$PassTB/players$PassLive
players$RiskyTouch<-players$Dispos/players$TouchesLive
dontadj<-c(
names(players)[which(!(names(players)%in%names(teams)))], #stuff like 'Player' and 'Nation' which is player specific
names(players)[which(grepl(pattern = '\\.', names(players)))], #columns with a period, which is a percentage or xStat-Stat
names(which(sapply(players, is.character))) #any remaining character columns like Squad
)
toadj<-names(players)[!(names(players) %in% dontadj)] #the rest, which will be team adjusted
tadjdf<-players
for (player in 1:nrow(tadjdf)){
for (var in toadj){
playerteam<-tadjdf$Squad[player]
teamvar<-teams[[var]][teams$Squad==playerteam]
tadjdf[[paste0('team', var)]][player]<-teamvar
tadjdf[[paste0('tAdj', var)]][player]<-
tadjdf[[var]][player]/tadjdf[[paste0('team', var)]][player]
}
}
# #remove the team- and original values, rename the tAdj values to original names
# tadjdf<-tadjdf %>%select(which(grepl(pattern = 'Player|Squad|tAdj', names(tadjdf))))
# colnames(tadjdf)<-str_replace(colnames(tadjdf), "tAdj", "")
# # add the unadjusted variables back in
# for (var in dontadj){
#   tadjdf<-tadjdf %>% mutate(!!var:= !!players[[var]])
# }
#remove OG, red cards and ShBlkSav which converted incorrectly because some teams have zero
tadjdf<-tadjdf %>% select(-c(tAdjOG, tAdjCrdR, tAdjBlockShSv))
tadjscaled<-tadjdf %>% select_if(is.numeric) %>% scale() %>% as.data.frame()
scaled<-players %>% select_if(is.numeric) %>% scale %>% as.data.frame()
## initial clustering of major roles ####
initvars<-c(
'Sh', 'npxG',
'ShperTouch',
'KP', 'xA',
'KPperTouch',
'PPA', 'PassF3',
'CrsPA',
'tAdjProgPasses',
'tAdjPassPrgDist',
'TouchperAction',
'tAdjCarryPrgDist',
'DribAtt', 'DribSucc',
'tAdjTouchesAttPen',
'tAdjTouchesAtt3rd',
'tAdjTouchesMid3rd',
'tAdjTouchesDef3rd',
#'tAdjPassLive',
'PassCmp.',
#'SCADrib',
#'SCAFld',
'SCAPassLive',
#'SCASh',
'tAdjBallsWon',
'tAdjPressMid3rd',
'tAdjPressDef3rd',
'percLongPass',
'percShortPass',
'RiskyTouch',
'percTB')
cordisttadj<-tadjscaled %>% select(all_of(initvars)) %>% get_dist(method='spearman')
#cordist<-scaled %>% select(all_of(initvars)) %>% get_dist(method='spearman')
set.seed(200)
dtsne<-Rtsne::Rtsne(cordisttadj, perplexity=30, is_dist=T)
plot(dtsne$Y)
respca<-PCA(select(tadjscaled, all_of(initvars)), scale.unit = F, ncp = 13, graph=F)
respca$var$cor %>%
promax
library(psych)
library(GPArotation)
fit <- principal(select(tadjscaled, all_of(initvars)), nfactors=13, rotate="promax")
print(fit)
fit <- principal(select(tadjscaled, all_of(initvars)), nfactors=12, rotate="promax")
print(fit)
fit <- principal(select(tadjscaled, all_of(initvars)), nfactors=11, rotate="promax")
print(fit)
fit <- principal(select(tadjscaled, all_of(initvars)), nfactors=10, rotate="promax")
print(fit)
fit <- principal(select(tadjscaled, all_of(initvars)), nfactors=11, rotate="promax")
print(fit)
simple<-fit$scores %>% as.data.frame()
colnames(simple)<-c('FinalBall', 'Shooting', 'Ballwinning',
'MFProg','LongPass','HighDef',
'RiskyPoss', 'Dribbling', 'Crossing',
'TBs', 'CarryProg')
pcacordist<-get_dist(simple, method='spearman')
set.seed(200)
dtsne<-Rtsne::Rtsne(pcacordist, perplexity=20, is_dist=T)
set.seed(200)
dtsne<-Rtsne::Rtsne(pcacordist, perplexity=40, is_dist=T)
#dtsne<-Rtsne::Rtsne(simple, perplexity=20)
plot(dtsne$Y)
set.seed(200)
dtsne<-Rtsne::Rtsne(pcacordist, perplexity=20, is_dist=T)
#dtsne<-Rtsne::Rtsne(simple, perplexity=20)
plot(dtsne$Y)
set.seed(200)
dtsne<-Rtsne::Rtsne(pcacordist, perplexity=50, is_dist=T)
#dtsne<-Rtsne::Rtsne(simple, perplexity=20)
plot(dtsne$Y)
restsne<-dtsne$Y %>% as.data.frame()
plot_clust_tendency(4:13, restsne)
resfcm<-fcm(restsne, 10, m=2)
plot_cluster(restsne, resfcm$cluster)
compare=c(3,7)
simple %>% mutate(clustnum=resfcm$cluster) %>%
group_by(clustnum) %>% summarise_all(median) %>%
filter(clustnum%in% compare) %>% View
compare=c(6,4)
simple %>% mutate(clustnum=resfcm$cluster) %>%
group_by(clustnum) %>% summarise_all(median) %>%
filter(clustnum%in% compare) %>% View
compare=c(1,8)
simple %>% mutate(clustnum=resfcm$cluster) %>%
group_by(clustnum) %>% summarise_all(median) %>%
filter(clustnum%in% compare) %>% View
compare=c(9,10)
simple %>% mutate(clustnum=resfcm$cluster) %>%
group_by(clustnum) %>% summarise_all(median) %>%
filter(clustnum%in% compare) %>% View
compare=c(2,5)
simple %>% mutate(clustnum=resfcm$cluster) %>%
group_by(clustnum) %>% summarise_all(median) %>%
filter(clustnum%in% compare) %>% View
clustprobs<-resfcm$u %>% as.data.frame %>%
setNames(c('AttackFB', 'Finisher', 'ProgDef',
'DefMF','RoundedFinisher','ProgMF',
'ClumsyDef' ,'PossFB','DribblyCreator',
'MFCreator'
)) %>%
round(3) %>%
mutate(Player=!!players$Player)
View(clustprobs)
compare=c(1,8)
simple %>% mutate(clustnum=resfcm$cluster) %>%
group_by(clustnum) %>% summarise_all(median) %>%
filter(clustnum%in% compare) %>% View
df1<-read.csv('../top5players-upd.csv')
df2<-read.csv('../top5players-py1.csv')
df3<-read.csv('../top5players-py2.csv')
#first we're gonna convert eveything back from per 90s
#this will let us caluclate per 90 across three years
notper90<-which(grepl(pattern = 'Player|Pos|Matches|Squad|League|/Sh|/SoT|%|MP|Min|Starts|Poss|Age|Born|Nation', names(df1)))
per90<-which(!(names(df1) %in% notper90))
#convert df1 back from per90
for (row in 1:nrow(df1)){
df1[row,-notper90]<-df1[row,-notper90]*(df1$Min[row]/90)
}
#convert df2 back from per90
for (row in 1:nrow(df3)){
df2[row,-notper90]<-df2[row,-notper90]*(df2$Min[row]/90)
}
#convert df3 back from per90
for (row in 1:nrow(df2)){
df3[row,-notper90]<-df3[row,-notper90]*(df3$Min[row]/90)
}
#matching players across years is a pain in the ass because of duplicate player names within years
#some are actually different players (eg, there are two Marcelos)
#some are the same player on diff teams
#using DOB can separate the two
df1$PlayerDOB<-paste(df1$Player, df1$Born, sep=':')
df2$PlayerDOB<-paste(df2$Player, df2$Born, sep=':')
df3$PlayerDOB<-paste(df3$Player, df3$Born, sep=':')
#add a row to mark duplicate player+DOB
df1$duplicateplayer<-duplicated(df1$PlayerDOB)
df2$duplicateplayer<-duplicated(df2$PlayerDOB)
df3$duplicateplayer<-duplicated(df3$PlayerDOB)
#add a row to mark duplicate player+DOB
for (df in c("df1", "df2", "df3")){
assign(df, get(df))
}
df1<-read.csv('../top5players-upd.csv')
df2<-read.csv('../top5players-py1.csv')
df3<-read.csv('../top5players-py2.csv')
#first we're gonna convert eveything back from per 90s
#this will let us caluclate per 90 across three years
notper90<-which(grepl(pattern = 'Player|Pos|Matches|Squad|League|/Sh|/SoT|%|MP|Min|Starts|Poss|Age|Born|Nation', names(df1)))
per90<-which(!(names(df1) %in% notper90))
?assign
df1<-read.csv('../top5players-upd.csv')
df2<-read.csv('../top5players-py1.csv')
df3<-read.csv('../top5players-py2.csv')
#first we're gonna convert eveything back from per 90s
#this will let us caluclate per 90 across three years
notper90<-which(grepl(pattern = 'Player|Pos|Matches|Squad|League|/Sh|/SoT|%|MP|Min|Starts|Poss|Age|Born|Nation', names(df1)))
per90<-which(!(names(df1) %in% notper90))
for (year in c('df1', 'df2', 'df3')){ #loop through each year and process the same way
yeardf<-get(year)
for (row in 1:nrow(yeardf)){
yeardf[row,-notper90]<-yeardf[row,-notper90]*(df1$Min[row]/90)
}
assign(paste0(year, "procd"), yeardf) #save the processed df as df1procd, df2procd, etc
}
head(df1procd)
colnames(df1)[notper90]
colnames(df1)[per90]
#remember to open the docker first!!!
source('FBref-scraper.R')
prevYrs=2 #null for this season's data, 1 for last season's, 2 for two seasons ago, etc.
outfile='top5players-py2.csv'
#df with page names and matching table names
leaguevals<-data.frame(leaguename=c('Bundesliga', 'Premier-League','Serie-A', 'La-Liga', 'Ligue-1'),
leaguenumber=c('20', '9', '11', '12', '13')
)
################
### do work ####
################
## initial scraping ####
#currently missing playing time, will need to remove players with zero mins if we want to add that in
pagenames<-c('standard', 'shooting',
'passing', 'passing_types', 'gca', 'defense',
'possession', 'misc')
for (league in 1:nrow(leaguevals)){#league is the row index number within the leaguevals df
leaguename<-leaguevals$leaguename[league]
leaguenumber<-leaguevals$leaguenumber[league]
for (page in pagenames){
if(page=='standard'){
leagueurl<-paste0("https://fbref.com/en/comps/", leaguenumber, "/stats/", leaguename, "-Stats")
# }else if(page=='playing_time'){
#   leagueurl<-paste0("https://fbref.com/en/comps/", leaguenumber, "/playingtime/", leaguename, "-Stats")
}else{
leagueurl<-paste0("https://fbref.com/en/comps/", leaguenumber, "/", page, '/', leaguename, "-Stats")
}
#get the table from this page, stored in df called thisLeague
if (page==pagenames[1]){#initialize df if its the first table for the league
thisLeague<-getFBrefStats(leagueurl, paste0('#stats_',page), numYearsBack = prevYrs)
}
else{#after that add to the df
tmp = getFBrefStats(leagueurl, paste0('#stats_',page), numYearsBack = prevYrs)
thisLeague<- cbind(thisLeague, tmp)
}
}#end for page loop
#add league name to df
thisLeague$League<-c("League", rep(leaguename, nrow(thisLeague)-1))
if (league==1){ #for the first league, initialize players
players<-thisLeague
}
else{ #after that add to players
players<-rbind(players, thisLeague[-1,]) #first row is variable names
}
}#end league loop
write.csv(players, 'top5playersraw.csv')
## reformat to make the table easier to use ####
formatted<-players[-1,]
colnames(formatted)<-players[1,]
library(tidyverse)
#rename a bunch of columns
#df containing string for marker in top column of players colnames and addon for those columns
replacevals<-data.frame(tag=c('Per 90 Minutes',
'Total', 'Short', 'Medium', 'Long',
'Pass Types','Corner Kicks', 'Height', 'Body Parts', 'Outcomes',
'SCA Types', 'GCA Types', 'Tackles', 'Vs Dribbles',
'Pressures', 'Blocks', 'Touches', 'Dribbles', 'Carries', 'Aerial Duels'),
prefix=c('per90',
'Pass', 'SPass', 'MPass', 'LPass',
'Pass','CK', 'Pass', 'Pass', 'Pass',
'SCA', 'GCA', 'Tkl', 'vDrib',
'Press','Block', 'Touches','Drib', 'Carry', 'Aer'))
#loop through the df and add prefixes to variables in formatted
for (i in 1:nrow(replacevals)){
names(formatted)[names(players)==replacevals$tag[i]]<-
paste0(
replacevals$prefix[i],
names(formatted)[names(players)==replacevals$tag[i]]
)
}
#remove duplicate columns
formatted<-formatted[,which(!duplicated(names(formatted)))] #original scraped data with weird first row
#change some now redundant names
formatted<-formatted %>%
rename(Press=PressPress, Blocks=BlockBlocks, Touches=TouchesTouches, Carries=CarryCarries)
#remove spaces in column names beacuse I don't like that
colnames(formatted)<-str_replace(colnames(formatted), " ", "")
#remove per 90s (we want to convert everything to per 90)
formatted<-subset(formatted, select=which(!grepl( "90" , names(formatted))))
#remove comma in Min column so we can convert it to a number
formatted$Min<-str_replace(formatted$Min, ",", "")
#remove rows that are just variable names
formatted<-subset(formatted, Player!='Player')
#convert everything to numeric (other than actual character columns)
numbers<-formatted %>% mutate_all(as.numeric) %>% select_if(~ any(!is.na(.))) #numbers
chars<-formatted %>% select(!any_of(names(numbers))) #chars
formatted<-cbind(chars, numbers) #merge them back
#remove per 90 columns (we'll convert everything to per 90)
formatted<-subset(formatted, select=which(!grepl( "90" , names(formatted))))
#remove problem players with very few Min played
formatted<-subset(formatted, Min >= 500)
#convert everything in formatted to per 90s
dontconvert<-which(grepl(pattern = 'Player|Pos|Matches|Squad|League|/Sh|/SoT|%|MP|Min|Starts|Poss|Age|Born|Nation', names(formatted)))
MPass<-which(grepl(pattern = 'MPass', names(formatted))) #these should be converted but get marked as dont convert because they contain MP
for (row in 1:nrow(formatted)){
formatted[row,-dontconvert]<-formatted[row,-dontconvert]/(formatted$Min[row]/90)
formatted[row, MPass]<-formatted[row, MPass]/(formatted$Min[row]/90)
}
#rename some stray columns
colnames(formatted)[colnames(formatted)=="1/3"]<-'PassF3'
colnames(formatted)[colnames(formatted)=="Prog"]<-'ProgPasses'
#remove % sign in some column names
colnames(formatted)<-str_replace(colnames(formatted), "%", "perc")
#remove / sign in some column names
colnames(formatted)<-str_replace(colnames(formatted), "/", "per")
## save out ####
write.csv(formatted,outfile)
krm(list=ls())
rm(list=ls())
